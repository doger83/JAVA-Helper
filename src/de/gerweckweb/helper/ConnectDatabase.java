/*corat
 *12.09.2020
 *16:22
 *JAVA-Helper
 */

package de.gerweckweb.helper;

import java.sql.*;
import java.util.Scanner;

/**This class establishes a connection to a database and offers the possibility of transferring your own queries and outputting the result (previously only on) the console.
 * The JDBC API is used to create a server SQL database connection. To use the JDBC API with a particular database management system, you need a JDBC technology-based driver
 * to mediate between JDBC technology and the database. Depending on various factors, a driver might be written purely in the Java programming language or in a mixture of
 * the Java programming language and JavaTM Native Interface (JNI) native methods. The JDBC web site maintains a list of vendors with drivers currently available or under development.
 * The latest JDK includes a JDBC-ODBC Bridge driver that makes most Open Database Connectivity (ODBC) drivers available to programmers using the JDBC API.
 * JDBC-ODBC Bridge Driver describes the current status of this software. Note that the bridge driver included in the JavaTM 2 Platform Standard Edition 5.0 (J2SETM) is appropriate
 * only for experimental use or when no other driver is available.
 *
 * The API provided by Microsoft JDBC Driver for SQL Server can be used from within Java programming code to connect and communicate with a Microsoft SQL Server database.
 *
 * Download the Microsoft JDBC Driver for SQL Server <a href="https://docs.microsoft.com/de-de/sql/connect/jdbc/download-microsoft-jdbc-driver-for-sql-server?view=sql-server-ver15">on micrsoft website</a>
 * @author corat
 */

public class ConnectDatabase {
    private String serverName;
    private int port;
    private String databaseName;
    private String username;
    private String password;

    /**
     * The constructor to create the object used for a database connection.
     *
     * @param serverName   <b>serverName</b> specifies the server to be used
     * @param port         specifies the <b>port</b> of the server to be used
     * @param databaseName specifies the <b>name of the database</b>
     * @param username     expects the <b>username</b> to login to the database server
     * @param password     expects the <b>password</b> to login to the database server
     * @throws SQLException An exception that provides information on a database access error or other errors.
     */
    public ConnectDatabase(String serverName, int port, String databaseName, String username, String password) throws SQLException {
        this.serverName = serverName;
        this.port = port;
        this.databaseName = databaseName;
        this.username = username;
        this.password = password;
    }


    /**
     * have to go to a database and output the gathered content to the console
     *
     * @param sql requires a sql query
     */
    public void connectDatabaseAndExecuteQuery(String sql) {

        try (Connection con = DriverManager.getConnection(createDatabaseUrl()); Statement stmt = con.createStatement();) {
            printDatabaseOutputOnConsole(sql, stmt);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

        //region SubMethods

    /**
     * With this method, the database query is output on the console
     *
     * @param sql  requires a complete SQL query
     * @param stmt executes the database query {@link java.sql.Statement} with parameter <b><i>sql</i></b>
     * @throws SQLException An <b>exception</b> that provides information on a database access error or other errors.
     */
    private void printDatabaseOutputOnConsole(String sql, Statement stmt) throws SQLException {
        ResultSet rs = stmt.executeQuery(sql);
        ResultSetMetaData rsmd = rs.getMetaData();
        getHeadingText(rsmd);
        printRequestedOutputOnConsole(rs, rsmd);
    }


    /**
     * outputs the results of the request to the console
     *
     * @param rs   an {@link java.sql.ResultSet} A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
     * @param rsmd an {@link java.sql.ResultSetMetaData} An object that can be used to get information about the types and properties of the columns in the ResultSet object.
     * @throws SQLException An <b>exception</b> that provides information on a database access error or other errors.
     */
    private void printRequestedOutputOnConsole(ResultSet rs, ResultSetMetaData rsmd) throws SQLException {
        while (rs.next()) {
            for (int i = 1; i <= rsmd.getColumnCount(); i++) {
                System.out.printf(" %32s ", rs.getString(i));
            }
            System.out.println();
        }
    }


    /**
     * outputs the column names on the console
     *
     * @param rsmd an {@link java.sql.ResultSetMetaData}
     * @throws SQLException An exception that provides information on a database access error or other errors.
     */
    private void getHeadingText(ResultSetMetaData rsmd) throws SQLException {
        for (int i = 1; i <= rsmd.getColumnCount(); i++) {
            System.out.printf(" %32s ", rsmd.getColumnName(i));
        }
        System.out.println("\n");
    }


    /**
     * constructs a new url to connect to a SQL Server database table
     *
     * @return the required string to connect to a database table
     */
    public String createDatabaseUrl() {
        String serverAndPort = "jdbc:sqlserver://" + getServerName() + ":" + getPort();
        String toNamedatabase = ";databaseName=" + getDatabaseName() + ";integratedSecurity=true;";

        return serverAndPort + toNamedatabase;
    }

    //endregion

        //region Setter/Getter

    public String getServerName() {
        return serverName;
    }

    public void setServerName(String serverName) {
        this.serverName = serverName;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public String getDatabaseName() {
        return databaseName;
    }

    public void setDatabaseName(String databaseName) {
        this.databaseName = databaseName;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    //endregion

        //region other Methods

    //TODO   wird das benÃ¶tigt?!
    public static ConnectDatabase connectWithNewUserLogin() {
        try (Scanner sc = new Scanner(System.in)) {
            String user, pwd;
            System.out.println("Username: ");
            user = sc.nextLine();
            System.out.println("Passwort: ");
            pwd = sc.nextLine();
            Logins login = new Logins(user, pwd);
            return new ConnectDatabase("localhost", 1433, "TeachSQL", user, pwd);

        } catch (Exception e) {
            System.out.println(e.getMessage());
            return null;
        }

    }
    //endregion
}



